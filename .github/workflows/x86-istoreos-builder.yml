#
# Copyright (c) 2022-2024 SMALLPROGRAM <https://github.com/smallprogram/OpenWrtAction>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/smallprogram/OpenWrtAction
# Description: Build OpenWrt using GitHub Actions
#

name: Build-iStoreOS-x86

on:
  repository_dispatch:
    types: [openwrt_source_update]
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      is_display_detailed:
        description: 'Whether to display detailed information about compilation'
        required: false
        default: 'false'
      is_single_threaded:
        description: 'Whether single-threaded compilation'
        required: false
        default: 'false'
  # schedule:
  #   - cron: 0 */8 * * *

env:
  REPO_URL: https://github.com/istoreos/istoreos
  REPO_BRANCH: istoreos-22.03
  FEEDS_CONF: feeds.conf
  CONFIGS: x86.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_ARTIFACT: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  job_init: 
    runs-on: ubuntu-latest
    name: Build-Init 编译初始化
    outputs:
      output_release_tag: ${{ steps.gen_release_tag.outputs.release_tag }}
      output_sha: ${{steps.commit.outputs.commit_hash }}
    steps:
      - name: Generate Tag Name 生成标签名字
        id: gen_release_tag
        run: |
          echo "release_tag=istoreos-X86_$(date +"%Y.%m.%d_%H.%M.%S")" >> $GITHUB_OUTPUT
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          cd /workdir
          sudo mkdir -p output
          sudo chown $USER:$GROUPS /workdir/output
          ln -sf /workdir/output $GITHUB_WORKSPACE/output

      - name: Checkout 准备完成
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Clone Source Code 克隆源码
        working-directory: /workdir
        run: |
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load Custom Feeds 加载自定义feeds
        run: |
          [ -e $FEEDS_CONF ] && cp -r $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update Feeds 更新feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install Feeds 安装feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Make Defconfig Custom Configuration 加载自定义配置
        run: |
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

          cd ..
          [ -e $CONFIGS ] && cp -r $CONFIGS openwrt/.config
          cd openwrt
          echo "make defconfig"
          make defconfig
          cd ..
          echo "更新"
          cp -f openwrt/.config $CONFIGS
          cd openwrt
          rm -rf .config

      - name: Git Auto Update Config Git自动更新配置
        uses: stefanzweifel/git-auto-commit-action@v5.0.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: auto update config
          branch: main
          commit_author: asxs123 <54346276+asxs123@users.noreply.github.com>

      - name: Generate Release Tag 生成发布标签
        id: tag
        run: |
          echo "## :mega:Update content" >> release.txt

          echo "![](https://img.shields.io/github/downloads/asxs123/OpenWrt_x86/${{ steps.gen_release_tag.outputs.release_tag }}/total?style=flat-square)" >> release.txt

          echo "### Firmware Information" >> release.txt

          echo "**:loudspeaker:取消ext4格式，只保留squashfs格式。**" >> release.txt
          echo "**:computer:包括传统IMG格式固件和UEFI启动固件。**" >> release.txt
          # echo "**:cd:包括qcow2格式固件和支持pve虚拟机的UEFI启动固件。**" >> release.txt
          # echo "**:cd:包括支持Visual Box虚拟机的vdi格式固件和UEFI启动固件。**" >> release.txt
          # echo "**:cd:包括vhdx格式固件和支持Hyper-v虚拟机的UEFI启动固件。**" >> release.txt
          echo "**:dvd:包括支持ESXi虚拟机的vmdk格式固件和UEFI启动固件（8.0需要工具转换）。**" >> release.txt
          echo "" >> release.txt

          echo "### Compile Information" >> release.txt

          kernel_X86=$(grep -oP 'KERNEL_PATCHVER:=\K[^ ]+' $GITHUB_WORKSPACE/openwrt/target/linux/x86/Makefile)

          echo "platform|kernel|compile status" >> release.txt
          echo "-|-|-" >> release.txt
          echo "**:ice_cube: X86**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_X86} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt

          touch release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Tags To Artifact 将标签上传到项目
        uses: actions/upload-artifact@v4
        with:
          name: release_tag_${{ steps.gen_release_tag.outputs.release_tag }}
          path: release.txt
          retention-days: 5

      - name: Generate Git Log 生成 Git 日志
        if: steps.tag.outputs.status == 'success'
        id: git_log
        run: |
            cd $GITHUB_WORKSPACE
            git -C openwrt log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/packages log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/luci log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/routing log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/telephony log -n 1 --format="%H" >> git_log.txt
            # git -C openwrt/feeds/helloworld log -n 1 --format="%H" >> git_log.txt
            # git -C openwrt/feeds/passwall_packages log -n 1 --format="%H" >> git_log.txt
            # git -C openwrt/feeds/passwall log -n 1 --format="%H" >> git_log.txt
            # git -C openwrt/feeds/passwall2 log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/OpenClash log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/third/luci-theme-argon log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/third/luci-app-argon-config log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/package/lean/luci-app-adguardhome log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/package/custom_packages/mosdns log -n 1 --format="%H" >> git_log.txt
            echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Git Log To Artifact 将 Git 日志上传到项目
        uses: actions/upload-artifact@v4
        if: steps.git_log.outputs.status == 'success'
        with:
          name: git_log_${{ steps.gen_release_tag.outputs.release_tag }}
          path: git_log.txt
          retention-days: 5

      - name: Generate Source Packages 生成源码包
        working-directory: /workdir
        id: generate_image
        run: |
          echo "source folder size:"
          du -hs openwrt/
          echo
          tar -czf output/output.tar.gz openwrt/

          echo "source code size:"
          cd output
          ls -lh output.tar.gz
          echo "SOURCE_PATH=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Source To Artifact 将源码上传到项目
        uses: actions/upload-artifact@v4
        if: steps.generate_image.outputs.status == 'success'
        with:
          name: Source_${{ steps.gen_release_tag.outputs.release_tag }}
          path: ${{ env.SOURCE_PATH }}/output.tar.gz
          retention-days: 5

  job_build:
    needs: job_init
    runs-on: ubuntu-latest
    name: Build-OpenWrt-X86
    strategy:
      fail-fast: false
      # matrix:
      #   platforms: [X86, R5S, R5C, R4S, R4SE, R2S, R2C, H66K, H68K, H69K, R66S, R68S, R_PI_3b, R_PI_4b]

    steps:
      - name: Initialization Environment 初始化编译环境
        run: |
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          df -hT
  
      - name: Maximize Build Space 最大化构建空间
      # 由于默认的 Ubuntu 环境只有 17G 左右的剩余空间，所以我们需要先利用如下 action 对编译环境进行扩容
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 6144
          swap-size-mb: 10240
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          build-mount-path: '/workdir'

      - name: Checkout 准备完成
        uses: actions/checkout@main
        with:
          ref: ${{ needs.job_init.outputs.output_sha }}

      - name: Install Packages 更新并安装依赖
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          # sudo -E apt-get -qq install $(curl -fsSL https://github.com/dracon-china/customize-istoreos-actions/raw/main/depends/ubuntu-22.04)
          sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/depends)
          wget https://bootstrap.pypa.io/pip/2.7/get-pip.py
          sudo python2.7 get-pip.py
          sudo rm -rf get-pip.py
          sudo pip install pyelftools
          sudo -E apt-get -qq autoremove --purge

          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
          sudo -E apt-get -qq clean

          sudo timedatectl set-timezone "$TZ"
          df -hT

      - name: Initialization Directory 初始化目录
        working-directory: /workdir
        id: init_directory
        run: |
          sudo mkdir -p openwrt
          sudo mkdir -p download
          sudo chown $USER:$GROUPS /workdir/openwrt
          sudo chown $USER:$GROUPS /workdir/download

          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          ln -sf /workdir/download $GITHUB_WORKSPACE/download

      - name: Download Source From Artifacts 从 Artifacts 下载源代码
        id : download
        uses: actions/download-artifact@v4
        with:
          name: Source_${{ needs.job_init.outputs.output_release_tag }}
          path: download

      - name: Download Tags 下载标签
        uses: actions/download-artifact@v4
        with:
          name: release_tag_${{ needs.job_init.outputs.output_release_tag }}
          path: download

      - name: File Extraction 文件提取
        working-directory: /workdir
        run: |
          echo "source packages size:"
          ls -lh download/output.tar.gz
          tar -xzf download/output.tar.gz
          rm -rf download/output.tar.gz
          cd download
          echo "TAG_PATH=$PWD" >> $GITHUB_ENV
          cd ..
          sudo chown -R $USER:$GROUPS /workdir/openwrt

      - name: Load Configuration 负载配置
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIGS ] && cp -r $CONFIGS openwrt/.config
          cd openwrt
          make defconfig

      - name: Download Package 下载软件包
        id: package
        run: |
          df -hT
          cd $GITHUB_WORKSPACE/openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          df -hT
      
      - name: SSH connection to Actions
        uses: mxschmitt/action-tmate@v3.16
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

      - name: Compile Tools 编译工具
        id: compile_tools
        run: |
          cd openwrt
          is_complie_error=0

          # 是否显示有关编译的详细信息
          if [[ "${{ github.event.inputs.is_display_detailed }}" == "true" ]]; then
            # 是否单线程编译
            if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
                echo "1 threads compile tools"
                make tools/compile -j1 V=s
                is_complie_error=${PIPESTATUS[0]}
            else
                echo "$(nproc) threads compile tools"
                make tools/compile -j$(nproc) V=s
                is_complie_error=${PIPESTATUS[0]}
            fi
          else
            if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
                echo "1 threads compile tools"
                make tools/compile -j1
                is_complie_error=${PIPESTATUS[0]}
            else
                echo "$(nproc) threads compile tools"
                make tools/compile -j$(nproc)
                is_complie_error=${PIPESTATUS[0]}
            fi
          fi

          echo "complie result： $is_complie_error"
          if [ "$is_complie_error" -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit $is_complie_error
          fi

          df -hT

      - name: Compile Toolchain 编译工具链
        if: steps.compile_tools.outputs.status == 'success'
        id: compile_toolchain
        run: |
          cd openwrt
          is_complie_error=0
          if [[ "${{ github.event.inputs.is_display_detailed }}" == "true" ]]; then
            if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
                echo "1 threads compile toolchain"
                make toolchain/compile -j1 V=s
                is_complie_error=${PIPESTATUS[0]}
            else
                echo "$(nproc) threads compile toolchain"
                make toolchain/compile -j$(nproc) V=s
                is_complie_error=${PIPESTATUS[0]}
            fi
          else
            if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
                echo "1 threads compile toolchain"
                make toolchain/compile -j1
                is_complie_error=${PIPESTATUS[0]}
            else
                echo "$(nproc) threads compile toolchain"
                make toolchain/compile -j$(nproc)
                is_complie_error=${PIPESTATUS[0]}
            fi
          fi

          echo "complie result： $is_complie_error"
          if [ "$is_complie_error" -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit $is_complie_error
          fi

          df -hT

      - name: Generate Frimware 编译固件
        if: steps.compile_toolchain.outputs.status == 'success'
        id: compile
        run: |
          cd openwrt
          is_complie_error=0
          if [[ "${{ github.event.inputs.is_display_detailed }}" == "true" ]]; then
            if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
                echo "1 threads compile frimware"
                make -j1 V=s
                is_complie_error=${PIPESTATUS[0]}
            else
                echo "$(nproc) threads compile frimware"
                make -j$(nproc) V=s
                is_complie_error=${PIPESTATUS[0]}
            fi
          else
            if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
                echo "1 threads compile frimware"
                make -j1
                is_complie_error=${PIPESTATUS[0]}
            else
                echo "$(nproc) threads compile frimware"
                make -j$(nproc)
                is_complie_error=${PIPESTATUS[0]}
            fi
          fi

          echo "complie result： $is_complie_error"
          if [ "$is_complie_error" -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit $is_complie_error
          fi

          df -hT

      - name: Check Space Usage 检查磁盘空间
        if: (!cancelled())
        run: df -hT

      - name: Upload Bin Directory 上传bin文件夹
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin_X86_${{ needs.job_init.outputs.output_release_tag }}
          path: openwrt/bin

      - name: Organize Files 整理固件文件
        id: organize
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
          mkdir -p feeds_packages
          firmware_path=$PWD
          cd $GITHUB_WORKSPACE/openwrt/bin/packages/*/
          mv * $firmware_path/feeds_packages
          cd $firmware_path
          zip -r buildinfo_X86.zip feeds_packages packages sha256sums version.buildinfo config.buildinfo feeds.buildinfo
          rm -rf packages feeds_packages sha256sums version.buildinfo config.buildinfo feeds.buildinfo

          echo "FIRMWARE=$firmware_path" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Firmware Directory 上传固件目录
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_ARTIFACT == 'true' && !cancelled()
        with:
          name: OpenWrt_firmware_X86_${{ needs.job_init.outputs.output_release_tag }}
          path: ${{ env.FIRMWARE }}

      - name: Upload Firmware To Release 自动发布固件到Releases
        uses: softprops/action-gh-release@master
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.job_init.outputs.output_release_tag }}
          body_path: ${{ env.TAG_PATH }}/release.txt
          files: ${{ env.FIRMWARE }}/*

  build_status_flag:
    needs: job_build
    if: ${{ always() }}
    name: Build-Status-Flag Build-Status-标志
    runs-on: ubuntu-latest
    outputs:
      checking_build_status: ${{ steps.status_checking.outputs.status }}
    steps:
      - name: Build_status_checking 构建状态检查
        id: status_checking
        run: |
          json_data=$(curl -s -H "Authorization: Bearer ${{ github.token }}" "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs")
          name_conclusion_array=($(echo "$json_data" | jq -r '.jobs[] | select(.name | startswith("Build-OpenWrt-")) | "\(.name).\(.conclusion)"'))

          # platforms=(X86 R5S R5C R4S R4SE R2S R2C H66K H68K H69K R66S R68S R_PI_3b R_PI_4b)
          
          # is_success_compiled=false
          # for ((i = 0; i < ${#platforms[@]}; i++)); do
          #   if $is_success_compiled; then break; fi
          #   platform="${platforms[i]}"
          #   for item in "${name_conclusion_array[@]}"; do
          #     IFS='.' read -r name conclusion <<< "$item"
          #     if [[ "$name" == "Build-OpenWrt-$platform" ]]; then
          #       if [[ "$conclusion" == "success" ]]; then
          #         is_success_compiled=true
          #         break
          #       fi
          #     fi
          #   done
          # done
          if $is_success_compiled; then break; fi
          for item in "${name_conclusion_array[@]}"; do
            IFS='.' read -r name conclusion <<< "$item"
            if [[ "$name" == "Build-OpenWrt-X86" ]]; then
              if [[ "$conclusion" == "success" ]]; then
                is_success_compiled=true
                break
              fi
            fi
          done

          echo "-------------------build status--------------------------"
          for item in "${name_conclusion_array[@]}"; do
            IFS='.' read -r name conclusion <<< "$item"
            echo "Name: $name"
            echo "Conclusion: $conclusion"
          done
          echo "-----------------------------------------------------------"

          

          if $is_success_compiled; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "Compilation succeeded for at least one platform."
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "Compilation failed for all platforms."
          fi


  job_organize_git_log:
    needs: [job_init, job_build, build_status_flag]
    if: ${{ always() && needs.build_status_flag.outputs.checking_build_status == 'success' }}
    runs-on: ubuntu-latest
    name: Organize-Git-Log 组织 Git 日志
    outputs:
      output_sha: ${{steps.commit.outputs.commit_hash }}
       
    steps:
    - name: Checkout 准备完成
      uses: actions/checkout@main
      with:
        ref: ${{ needs.job_init.outputs.output_sha }}

    - name: Download Git Log
      uses: actions/download-artifact@v4
      with:
        name: git_log_${{ needs.job_init.outputs.output_release_tag }}

    - name: Generate Git Log
      run: |
        REPO_URLS=(
          "https://github.com/istoreos/istoreos --filter=blob:none -b istoreos-22.03"
          "https://github.com/jjm2473/packages.git --filter=blob:none -b istoreos-22.03"
          "https://github.com/jjm2473/luci.git --filter=blob:none -b istoreos-22.03"
          "https://git.openwrt.org/feed/routing.git -b openwrt-22.03"
          "https://git.openwrt.org/feed/telephony.git -b openwrt-22.03"
          # "https://github.com/fw876/helloworld --filter=blob:none"
          # "https://github.com/xiaorouji/openwrt-passwall-packages --filter=blob:none"
          # "https://github.com/xiaorouji/openwrt-passwall --filter=blob:none"
          # "https://github.com/xiaorouji/openwrt-passwall2 --filter=blob:none"
          "https://github.com/vernesong/OpenClash.git --filter=blob:none"
          "https://github.com/jerrykuku/luci-theme-argon.git --filter=blob:none -b 18.06"
          "https://github.com/jerrykuku/luci-app-argon-config.git --filter=blob:none -b 18.06"
          "https://github.com/rufengsuixing/luci-app-adguardhome.git --filter=blob:none"
          "https://github.com/sbwml/luci-app-mosdns --filter=blob:none -b v5"
        )
        LINE_NUMBERS=(1 2 3 4 5 6 7 8 9 10 11 12 13 14)
        OUTPUT_FILES=(
          "istoreos"
          "packages"
          "luci"
          "routing"
          "telephony"
          # "helloworld"
          # "openwrt-passwall-packages"
          # "openwrt-passwall"
          # "openwrt-passwall2"
          "OpenClash"
          "luci-theme-argon"
          "luci-app-argon-config"
          "luci-app-adguardhome"
          "luci-app-mosdns"
        )
        TITLE_MESSAGES=(
          "istore os new commit log"
          "istore package new commit log"
          "istore luci new commit log"
          "openwrt routing new commit log"
          "openwrt telephony new commit log"
          # "helloworld new commit log"
          # "passwall packages new commit log"
          # "passwall new commit log"
          # "passwall2 new commit log"
          "openclash new commit log"
          "luci-theme-argon new commit log"
          "luci-app-argon-config new commit log"
          "luci-app-adguardhome new commit log"
          "luci-app-mosdns new commit log"
        )
        cd $GITHUB_WORKSPACE
        find git_log -type f ! -name 'log' -exec rm {} +
        mkdir -p git_repositories

        for i in "${!REPO_URLS[@]}"; do
          REPO_URL=${REPO_URLS[$i]}
          LINE_NUMBER=${LINE_NUMBERS[$i]}
          OUTPUT_FILE=${OUTPUT_FILES[$i]}
          TITLE_MESSAGE=${TITLE_MESSAGES[$i]}
          
          line=$(sed -n "${LINE_NUMBER}p" git_log/log)
          SHA_Begin=$(echo "$line" | sed -n 's/^[^:]*://p')
          SHA_End=$(sed -n "${LINE_NUMBER}p" git_log.txt)

          git clone $REPO_URL git_repositories/$OUTPUT_FILE

          if ! git -C git_repositories/$OUTPUT_FILE cat-file -t "$SHA_Begin" >/dev/null 2>&1 || \
            ! git -C git_repositories/$OUTPUT_FILE cat-file -t "$SHA_End" >/dev/null 2>&1; then
            sed -i "${LINE_NUMBER}s/:.*/:$SHA_End/" git_log/log

            echo " :x: Invalid SHA detected (Begin: $SHA_Begin, End: $SHA_End) for $OUTPUT_FILE"
            echo "<details> <summary> <b>$TITLE_MESSAGE :x: </b>  </summary>" >> "git_log/$OUTPUT_FILE.log"
            echo "" >> "git_log/$OUTPUT_FILE.log"
            echo "<b> It is detected that $OUTPUT_FILE has an illegal SHA value. It is possible that $OUTPUT_FILE has git rebase behavior. The relevant git update log cannot be counted. Please wait for the next compilation time.</b>" >> "git_log/$OUTPUT_FILE.log"
            echo "" >> "git_log/$OUTPUT_FILE.log"
            echo "</details>" >> "git_log/$OUTPUT_FILE.log"
            continue
          fi

          if [ -z "$SHA_Begin" ]; then
            sed -i "${LINE_NUMBER}s/:.*/:$SHA_End/" git_log/log
          elif [ "$SHA_Begin" != "$SHA_End" ]; then
            echo "<details> <summary> <b>$TITLE_MESSAGE :new: </b>  </summary>" >> "git_log/$OUTPUT_FILE.log"
            echo "" >> "git_log/$OUTPUT_FILE.log"
            echo "SHA|Author|Date|Message" >> "git_log/$OUTPUT_FILE.log"
            echo "-|-|-|-" >> "git_log/$OUTPUT_FILE.log"
            git -C git_repositories/$OUTPUT_FILE log --pretty=format:"%h|%an|%ad|%s" "$SHA_Begin...$SHA_End" >> "git_log/$OUTPUT_FILE.log"
            echo "" >> "git_log/$OUTPUT_FILE.log"
            echo "</details>" >> "git_log/$OUTPUT_FILE.log"
            echo "|-----------------------------------|"
            echo "$OUTPUT_FILE has update log"
            echo "|-----------------------------------|"
            sed -i "${LINE_NUMBER}s/:.*/:$SHA_End/" git_log/log
          fi
        done

        echo "|=========================================|"
        ls git_log
        echo "|=========================================|"
        cd $GITHUB_WORKSPACE
        rm -rf git_log.txt git_repositories


    - name: Git auto update git log
      uses: stefanzweifel/git-auto-commit-action@v5.0.0
      id: commit
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        commit_message: auto update git log
        branch: main
        commit_author: asxs123 <54346276+asxs123@users.noreply.github.com>


  job_organize_tags:
    needs: [job_init, job_build, job_organize_git_log, build_status_flag]
    if: ${{ always() && needs.build_status_flag.outputs.checking_build_status == 'success' }}
    runs-on: ubuntu-latest
    name: Organize-Release-Tags
        
    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        ref: ${{ needs.job_organize_git_log.outputs.output_sha }}

    - name: Download Tags
      uses: actions/download-artifact@v4
      with:
        name: release_tag_${{ needs.job_init.outputs.output_release_tag }}

    - name: Organize Tags
      id: organize_tags
      # env:
      #   GH_TOKEN: ${{ github.token }}
      run: |
        
        if [ -f "release.txt" ]; then

          json_data=$(curl -s -H "Authorization: Bearer ${{ github.token }}" "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs")
          name_conclusion_array=($(echo "$json_data" | jq -r '.jobs[] | select(.name | startswith("Build-OpenWrt-")) | "\(.name).\(.conclusion)"'))

          # platforms=(X86 R5S R5C R4S R4SE R2S R2C H66K H68K H69K R66S R68S R_PI_3b R_PI_4b)

          echo "-------------------build status--------------------------"
          for item in "${name_conclusion_array[@]}"; do
            IFS='.' read -r name conclusion <<< "$item"
            echo "Name: $name"
            echo "Conclusion: $conclusion"
          done
          echo "-----------------------------------------------------------"
          
          # for ((i = 0; i < ${#platforms[@]}; i++)); do
          #   platform="${platforms[i]}"
          #   is_error=false
          #   row=$((i+17))s
          #   for item in "${name_conclusion_array[@]}"; do
          #     IFS='.' read -r name conclusion <<< "$item"          
          #     if [[ "$name" == "Build-OpenWrt-$platform" ]]; then
          #       if [[ "$conclusion" == "success" ]]; then
          #         break
          #       else
          #         is_error=true
          #         break
          #       fi
          #     fi
          #   done
            
          #   if $is_error; then
          #     echo "is_error be true: $is_error"
          #     sed -i "$row/build-in_progress_or_waiting.....-yellow?logo=githubactions\&logoColor=yellow/build-failure-red?logo=githubactions\&logoColor=red/" release.txt;
          #   else
          #     echo "is_error be false: $is_error"
          #     sed -i "$row/build-in_progress_or_waiting.....-yellow?logo=githubactions\&logoColor=yellow/build-passing-green?logo=githubactions\&logoColor=green/" release.txt;
          #   fi
          # done
          is_error=false
          row=$((17))s
          for item in "${name_conclusion_array[@]}"; do
            IFS='.' read -r name conclusion <<< "$item"          
            if [[ "$name" == "Build-OpenWrt-X86" ]]; then
              if [[ "$conclusion" == "success" ]]; then
                break
              else
                is_error=true
                break
              fi
            fi
          done
            
          if $is_error; then
            echo "is_error be true: $is_error"
            sed -i "$row/build-in_progress_or_waiting.....-yellow?logo=githubactions\&logoColor=yellow/build-failure-red?logo=githubactions\&logoColor=red/" release.txt;
          else
            echo "is_error be false: $is_error"
            sed -i "$row/build-in_progress_or_waiting.....-yellow?logo=githubactions\&logoColor=yellow/build-passing-green?logo=githubactions\&logoColor=green/" release.txt;
          fi

          echo "|=========================================|"
          ls git_log
          echo "|=========================================|"

          echo "## What's Changed" >> release.txt

          OUTPUT_FILES=(
            "istoreos"
            "packages"
            "luci"
            "routing"
            "telephony"
            # "helloworld"
            # "openwrt-passwall-packages"
            # "openwrt-passwall"
            # "openwrt-passwall2"
            "OpenClash"
            "luci-theme-argon"
            "luci-app-argon-config"
            "luci-app-adguardhome"
            "luci-app-mosdns"
          )

          for file in "${OUTPUT_FILES[@]}"; do
            if [ -f "git_log/$file.log" ]; then
              echo "found file $file.log!"
              cat "git_log/$file.log" >> release.txt
            else
              echo "no file $file.log 404"
            fi
          done
          

          echo "status=success" >> $GITHUB_OUTPUT
          echo "-----------------------release.txt------------------------"
          cat release.txt

        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Upload Release Tag
      uses: softprops/action-gh-release@master
      if: steps.organize_tags.outputs.status == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.job_init.outputs.output_release_tag }}
        body_path: release.txt
